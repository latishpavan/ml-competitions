first <- function(a, b){
a + b
}
first(1, 2)
x <- c(1, 2, 3)
mean(x)
df <- data.frame(a = c(1, 2, 3), b = c(4, 5, 6))
df
source('C:/Users/Personal/Desktop/inferential_stats/dagdata-master/inst/mice.r', echo=TRUE)
compute_mean(df)
x <- c(1, 2, 3, NA)
mean(x)
mean(x, na.rm = TRUE)
compute_mean <- function(df, removeNA = TRUE) {
nc <- ncol(df)
means <- numeric(nc)
for(i in seq_len(nc)) {
means[i] <- mean(df[, i], na.rm = removeNA)
}
means
}
compute_mean(df)
formals(compute_mean)
str(compute_mean)
args(compute_mean)
var_args <- function(...){
print(...)
}
var_args(1, 2, 3)
args(paste)
args(cat)
paste("latish", "pavan")
cat("latish", "pavan")
search()
library(dplyr)
search()
library(swirl)
ls()
rm(ls())
rm(list = ls())
ls()
library(swirl)
library(dplyr)
search()
library(dplyr, pos = 2)
search()
version(swril)
version(dplyr])
version(dplyr)
d <- "1999-01-01"
x <- as.Date(d)
x
unclass(x)
weekdays()
weekdays(x)
months(x)
quarters(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
p$s
p
?strptime
rnorm(10)
table(rnorm)
data <- rnorm(20)
table(data)
data <- rnorm(200)
table(data)
freq <- table(data)
barplot(freq)
data <- rnorm(2000)
freq <- table(data)
barplot(freq)
?rnorm
x <- list(a = 1:20, b = 4:10)
x
lapply(x, meam)
lapply(x, mean)
lapply(x, median)
lapply(x, mode)
lapply(x, table)
lapply(x, boxplot)
ls()
x <- 1:4
lapply(x, runif, min = 1, max = 2)
lapply(x, function(a) a^2)
sapply(x, function(a) a^2)
args(apply)
str(apply)
z <- matrix(matrix(1:9, nrow = 3))
z
z <- matrix(1:9, nrow = 3)
z
append()
apply(z, 1, median)
cbind(z, vector('NA', 3))
cbind(z, c(NA, NA, NA))
z
z <- cbind(z, c(NA, NA, NA))
z
cbind(z, c(NA, NA, NA))
apply(z, 1, median)
apply(z, 1, median, rm.NA = TRUE)
apply(z, 1, median, na.rm = TRUE)
apply(z, 1, median, na.rm = TRUE)
apply(z, 1, sum, na.rm = TRUE)
apply(z, 1, sum, na.rm = TRUE)
rowSums(z)
rowSums(z, na.rm = T)
z <- matrix(rnorm(200), 20, 10)
z
quantile(z[1, ])
apply(z, 1, quantile, probs = c(0.5, 0.75))
a <- array(rnorm(2 * 2 * 3), c(2, 2, 3))
a
apply(a, c(1, 2), mean)
apply(a, c(1, 2), medina)
apply(a, c(1, 2), median)
rowMeans()
rowMeans(a, dims = 1)
rowMeans(a, dims = 2)
rowSums(a, dims = 2)
str(rep)
rep(1)
rep(1, 8)
rep(NA, 3)
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4:1, 3:1)
mapply(rnorm, 1:4, 4:1, 3:1)
mapply(rnorm, 1:4, 4:1, 2)
gl()
gl(10)
gl(1, 10)
gl(3, 10)
rep.int(3, 10)
rep.complex(3 + 2i, 10)
x <- c(rnorm(10), runif(10))
x
f <- gl(2, 10)
tapply(x, f, meab)
tapply(x, f, mean)
range(1:20)
1:20:w2
1:20:2
rep(c(1, 2), 4)
1:0.01:2
1:0.1:2
1:1:2
1:10:2
str(mapply)
x
f
split(x, f)
sp <- split(x, f)
sp
sp['1']
sp$1
sp$1
names(sp)
lapply(sp, mean)
libar
library(datasets)
airquality
ls()
head(airquality)
tail(airquality)
split(airquality, airquality$Month)
lapply(split(airquality, airquality$Month), mean)
lapply(split(airquality, airquality$Month), mean, rm.na = T)
lapply(split(airquality, airquality$Month), mean, na.rm = T)
head(airquality)
lapply(split(airquality, airquality$Month), function(df) mean(df[, c("Temp")]))
df[, c("Temp")]
df[, "Temp"]
airquality[, "Temp"]
airquality[, c("Ozone", "Temp")]
head(airquality[, c("Ozone", "Temp")])
mean(head(airquality[, c("Ozone", "Temp")]))
colMeans(head(airquality[, c("Ozone", "Temp")]))
sapply(split(airquality, airquality$Month), function(df) mean(df[, c("Temp")]))
sapply(split(airquality, airquality$Month), function(df) colMeans(df[, c("Temp", "Ozone")], na.rm = T))
x <- c(1, 2, 3)
y <- c(1, 4, 9)
cor(x, y)
y <- c(1, 4, 6)
cor(x, y)
invisible(x)
invisible(x)
x
?invisible()
traceback()
traceback()
lm(y - x)
traceback()
options(error = recover)
lm(y - x)
debug()
x ^ 2
library(keras)
install_keras(method = "conda", tensorflow = "gpu")
library(tensorflow)
install_tensorflow(method = "conda", version = "gpu")
install_tensorflow(method = "conda", version = "gpu")
library(tensorflow)
install_tensorflow(method = "conda", version = "gpu")
install_tensorflow(version = "gpu")
install_tensorflow(gpu=T)
install_tensorflow()
library(keras)
install_keras()
y_train <- to_categorical(y_train, num_classes = 10)
y_test <- to_categorical(y_test, num_classes = 10)
library(keras)
to_categorical()
reticulate::use_python("C:\Users\Personal\ANACON~1\python.exe")
reticulate::use_python("C:\\Users\\Personal\\ANACON~1\\python.exe")
library(keras)
to_categorical()
reticulate::use_condaenv("r-tensorflow", conda = "C:/Users/Personal/Anaconda3/Scripts/conda.exe")
library(keras)
to_categorical()
library(keras)
to_categorical()
to_categorical()
z.test()
library(stats)
z.test()
install.packages("bsda")
install.packages("BSDA")
library(BSDA)
z.test()
library(caret)
path <- "E:/machine learning competitions/kaggle/house prices/"
setwd(path)
train.data <- read.csv("train.csv")
str(train.data)
library(mlbench)
data("PimaIndiansDiabetes")
corr <- cor(PimaIndiansDiabetes[, 1:8])
corr
hc <- findCorrelation(corr, cutoff = 0.5)
hc
